<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;

use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

#[Route('/auth')]

final class AuthController extends AbstractController{

    #[Route('/register', name: 'app_user_register', methods: ['GET', 'POST'])]
    public function register(
        Request $request, 
        EntityManagerInterface $entityManager, 
        UserPasswordHasherInterface $passwordHasher, 
        SluggerInterface $slugger,
        MailerInterface $mailer
    ): Response {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Hash the password before storing it
            $hashedPassword = $passwordHasher->hashPassword($user, $user->getMdp());
            $user->setMdp($hashedPassword);
            $user->setDateInscription(new \DateTime()); 
            $user->setStatus(false); 
            $verificationToken = bin2hex(random_bytes(32));
            $user->setVerificationToken($verificationToken);

            // Handle file upload
            $photoFile = $form->get('photo_profil')->getData();
            if ($photoFile) {
                $originalFilename = pathinfo($photoFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename . '-' . uniqid() . '.' . $photoFile->guessExtension();

                try {
                    $photoFile->move(
                        $this->getParameter('profile_pictures_directory'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // Handle upload error
                    $this->addFlash('error', 'Profile picture upload failed.');
                }

                $user->setPhotoProfil($newFilename);
            }

            $entityManager->persist($user);
            $entityManager->flush();

            $verificationUrl = $this->generateUrl('app_verify_email', [
                'token' => $verificationToken,
            ], UrlGeneratorInterface::ABSOLUTE_URL);
    
            $emailMessage = (new Email())
                ->from('noreply@yourdomain.com')
                ->to($user->getEmail())
                ->subject('Verify Your Email')
                ->html("
                    <p>Hi <b>{$user->getNom()}</b>,</p>
                    <p>Please verify your email by clicking the link below:</p>
                    <p><a href='$verificationUrl'>Verify Email</a></p>
                    <p>This link is valid for 24 hours.</p>
                ");
    
            $mailer->send($emailMessage);
    
            $this->addFlash('success', 'Registration successful! Please check your email to verify your account.');

            return $this->redirectToRoute('app_login');
        }

        return $this->render('auth/regiter.html.twig', [
            'form' => $form->createView(),
        ]);
    }
    #[Route('/login', name: 'app_login')]
    public function login(AuthenticationUtils $authenticationUtils, Security $security, EntityManagerInterface $entityManager): Response
    {
        // Get login error if any
        $error = $authenticationUtils->getLastAuthenticationError();
        $lastUsername = $authenticationUtils->getLastUsername();
    
        // Retrieve the user from the database
        if ($lastUsername) {
            $user = $entityManager->getRepository(User::class)->findOneBy(['email' => $lastUsername]);
    
            
            if ($user && !$user->isStatus()) {
                $this->addFlash('danger', 'Your email is not verified! Please check your inbox.');
                return $this->render('auth/login.html.twig', [
                    'last_username' => $lastUsername,
                    'error' => $error,
                ]);
            }
    
            
            if ($user) {
                if ($security->isGranted('ROLE_ADMIN')) {
                    return $this->redirectToRoute('app_back');
                }
                if ($security->isGranted('ROLE_STUDENT') || $security->isGranted('ROLE_FORMATEUR')) {
                    return $this->redirectToRoute('app_front');
                }
            }
        }
    
        return $this->render('auth/login.html.twig', [
            'last_username' => $lastUsername,
            'error' => $error,
        ]);
    }

    #[Route('/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \Exception('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
    #[Route('/reset-password/request', name: 'app_reset_password_request')]
    public function request(Request $request, EntityManagerInterface $entityManager, MailerInterface $mailer, SessionInterface $session): Response
    {
        if ($request->isMethod('POST')) {
            $email = $request->request->get('email');
            $user = $entityManager->getRepository(User::class)->findOneBy(['email' => $email]);

            if (!$user) {
                $this->addFlash('danger', 'No user found with this email.');
                return $this->redirectToRoute('app_reset_password_request');
            }

            // Generate a 6-digit OTP
            $otp = rand(100000, 999999);

            // Save OTP in session (valid for 10 minutes)
            $session->set('reset_email', $email);
            $session->set('reset_otp', $otp);
            $session->set('reset_otp_expires_at', time() + 600); // OTP valid for 10 minutes

            // Send OTP via email
            $emailMessage = (new Email())
                ->from('noreply@yourdomain.com')
                ->to($user->getEmail())
                ->subject('Your Password Reset OTP')
                ->text("Your OTP code for password reset is: $otp. This code is valid for 10 minutes.");

            $mailer->send($emailMessage);

            $this->addFlash('success', 'An OTP has been sent to your email.');
            return $this->redirectToRoute('app_reset_password_new');
        }

        return $this->render('auth/reset_password_request.html.twig');
    }
    #[Route('/new', name: 'app_reset_password_new')]
    public function newPassword(Request $request, EntityManagerInterface $entityManager, SessionInterface $session, UserPasswordHasherInterface $passwordHasher): Response
    {
        $email = $session->get('reset_email');

        if (!$email) {
            return $this->redirectToRoute('app_reset_password_request');
        }

        if ($request->isMethod('POST')) {
            $enteredOtp = $request->request->get('otp');
            $newPassword = $request->request->get('password');

            // Retrieve stored OTP
            $storedOtp = $session->get('reset_otp');
            $otpExpiry = $session->get('reset_otp_expires_at');

            if (!$storedOtp || time() > $otpExpiry || $enteredOtp != $storedOtp) {
                $this->addFlash('danger', 'Invalid or expired OTP.');
                return $this->redirectToRoute('app_reset_password_new');
            }

            // Find user and update password
            $user = $entityManager->getRepository(User::class)->findOneBy(['email' => $email]);

            if (!$user) {
                $this->addFlash('danger', 'User not found.');
                return $this->redirectToRoute('app_reset_password_request');
            }

            // Hash and update new password
            $hashedPassword = $passwordHasher->hashPassword($user, $newPassword);
            $user->setMdp($hashedPassword);
            $entityManager->persist($user);
            $entityManager->flush();

            // Clear session
            $session->remove('reset_email');
            $session->remove('reset_otp');
            $session->remove('reset_otp_expires_at');

            $this->addFlash('success', 'Password successfully updated. You can now login.');
            return $this->redirectToRoute('app_login');
        }

        return $this->render('auth/update_password.html.twig');
    }
    #[Route('/verify-email/{token}', name: 'app_verify_email')]
public function verifyEmail(string $token, EntityManagerInterface $entityManager): Response
{
    // Find user by token
    $user = $entityManager->getRepository(User::class)->findOneBy(['verificationToken' => $token]);

    if (!$user) {
        $this->addFlash('danger', 'Invalid verification token.');
        return $this->redirectToRoute('app_login');
    }

    
    $user->setStatus(true);
    $user->setVerificationToken(null); 

    $entityManager->persist($user);
    $entityManager->flush();

    $this->addFlash('success', 'Your email has been verified! You can now log in.');

    return $this->redirectToRoute('app_login');
}
}