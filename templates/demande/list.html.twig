{% extends 'base.html.twig' %}

{% block title %}Liste des demandes{% endblock %}
 

{% block content %}
<div class="container mt-4">
    <button id="cleanBtn" class="btn btn-warning mb-3">Clean</button>  <!-- Bouton "Clean" -->
    <form method="GET" action="{{ path('demande_liste') }}">
        <label for="idR">Filtrer par etat :</label>
        <input type="text" name="status" id="status" value="{{ app.request.query.get('status') }}">
        <button type="submit">Filtrer</button>
    </form>
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Ressource</th>
                    <th>Status</th>
                    <th>Details</th>
                   
                    <th>Actions</th>
                    <th>Discussion</th>
                </tr>
            </thead>
            <tbody id="demandesTable">
                {% for demande in demandes %}
                    <tr data-id="{{ demande.getdemandeId }}">
                        <td>{{ demande.idR }}</td>
                        <td class="status">
                            <span class="badge {% if demande.status == 'Approuv√©' %}bg-success{% elseif demande.status == 'Rejet√©' %}bg-danger{% else %}bg-warning{% endif %}">
                                {{ demande.status }}
                            </span>
                        </td>
                       <td>    <p><strong>Date de cr√©ation :</strong> {{ demande.createdAt|date('d/m/Y H:i') }}</p>
                        <p><strong>Date d'expiration :</strong> {{ demande.expireDate|date('d/m/Y H:i') }}</p>
                        <p><strong>Message :</strong> {{ demande.message }}</p>
                        <p><strong>Priorit√© :</strong> {{ demande.priorite }}</p>
                    </td>
                        <td>
                            <form action="{{ path('app_demandes_update_status', {'id': demande.getdemandeId, 'status': 'Approuv√©'}) }}" method="POST">
                                <button type="submit" class="btn btn-success">Approuver</button>
                            </form>
                        
                            <form action="{{ path('app_demandes_update_status', {'id': demande.getdemandeId ,'status': 'Rejet√©'}) }}" method="POST">
                                <button type="submit" class="btn btn-danger">Rejeter</button>
                            </form>
                        </td>
                        <td>
                            <div id="discussionCard" class="hidden">
                                <div class="card-content">
                                    <span class="close-btn" onclick="closeCard()">&times;</span>
                                    <h3>Ajouter une proposition</h3>
                            
                                    <form id="propositionForm">
                                        <input type="hidden" id="demandeId" value="">
                            
                                        <label for="proposition">Proposition :</label>
                                        <textarea id="proposition" name="proposition"></textarea>
                            
                                        <button type="button" id="btnProposition" onclick="sendProposition()">Envoyer</button>
                                    </form>
                            
                                    <h4>Derni√®re proposition :</h4>
                                    <p id="lastProposition">Aucune proposition enregistr√©e.</p>
                                </div>
                            </div>
                            
                            <!-- Bouton pour ouvrir la card -->
                            <button class="openDiscussion" data-id="{{ demande.getDemandeId() }}">Proposer</button>
                            
                            <p><strong>Reponse:</strong> {{ demande.reponse}}</p>
                            
                           

                        </td>
                    </tr>
                    
                {% else %}
                    <tr>
                        <td colspan="6" class="text-center">Aucune demande trouv√©e.</td>
                    </tr>
                {% endfor %}
                
                
            </tbody>
        </table>
    
    </div>
</div>

<script>
   

   


   document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".openDiscussion").forEach(button => {
        button.addEventListener("click", function () {
            const demandeId = this.getAttribute("data-id");
            document.getElementById("demandeId").value = demandeId;
            document.getElementById("discussionCard").classList.remove("hidden");
        });
    });
});

function closeCard() {
    document.getElementById("discussionCard").classList.add("hidden");
}

function sendProposition() {
    const demandeId = document.getElementById("demandeId").value;
    const proposition = document.getElementById("proposition").value;

    if (proposition.trim() === "") {
        alert("Veuillez entrer une proposition !");
        return;
    }

    fetch(`/demande/${demandeId}/proposition`, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({ proposition })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById("lastProposition").textContent = data.proposition;
            alert("Proposition enregistr√©e !");
            document.getElementById("proposition").value = ""; // R√©initialiser le champ
        } else {
            alert("Erreur lors de l'enregistrement.");
        }
    })
    .catch(error => console.error("Erreur:", error));
}



 
document.getElementById("cleanBtn").addEventListener("click", async function() {
    console.log("D√©but du nettoyage...");

    let rows = document.querySelectorAll("tbody tr");
    let changed = false; // üî• D√©claration de changed ici

    console.log(`Nombre de lignes trouv√©es : ${rows.length}`);

    rows.forEach(async (row, index) => {
        let statusElement = row.querySelector("td:nth-child(2) span");
        let messageElement = row.querySelector("td:nth-child(3)");

        if (statusElement && messageElement) {
            let status = statusElement.textContent.trim();
            let message = messageElement.textContent.trim();

            if (status === "en cours") {
                let isValid = await verifyTextWithAI(message);
                let newStatus = isValid ? "en cours" : "rejet√©";

                console.log(`Ligne ${index + 1}: Ancien statut = "${status}", Nouveau statut = "${newStatus}"`);

                statusElement.textContent = newStatus;
                statusElement.className = newStatus === "en cours" ? "badge bg-warning" : "badge bg-danger";

                changed = true; // üî• Mise √† jour de changed
            }
        }
    });

    if (changed) {
        console.log("Modification termin√©e !");
    } else {
        console.log("Aucune modification effectu√©e.");
    }
});




async function verifyTextWithAI(text) {
    if (/^(.)\1{4,}$/.test(text) || text.length < 10) {
        return false;
    }

    try {
        const response = await fetch("https://api-inference.huggingface.co/models/textattack/roberta-base-CoLA", {
            method: "POST",
            headers: {
                "Authorization": "Bearer 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",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ inputs: text })
        });

        const result = await response.json();
        console.log("R√©ponse de l'API Hugging Face:", result);
        
        return !(result.length > 0 && result[0].label === "unacceptable");
    } catch (error) {
        console.error("Erreur API Hugging Face:", error);
        return true; // Si erreur API, consid√©rer valide
    }

}


</script>

{% endblock %}

