{% extends 'base.html.twig' %}

{% block title %}Liste des demandes{% endblock %}

{% block titlebody %}
<div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left">
        <div class="row">
            <div class="col-xl-12 mb-4">
                <div class="row">
                    <div class="col-lg-12 mb-3">
                        <div class="card p-lg-5 p-4 bg-primary-gradiant rounded-3 shadow-xss bg-pattern border-0 overflow-hidden">
                            <div class="bg-pattern-div"></div>
                            <h2 class="display2-size display2-md-size fw-700 text-white mb-0 mt-0">Listes des demandes</h2>
                        </div>
                    </div>                                 
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock  %}          

{% block body %}
<div class="container mt-4">
    <button id="cleanBtn" class="btn btn-warning mb-3">Clean</button>  <!-- Bouton "Clean" -->

    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>ID Ressource</th>
                    <th>Status</th>
                    <th>Message</th>
                    <th>Date de d√©but</th>
                    <th>Date de fin</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="demandesTable">
                {% for demande in demandes %}
                    <tr data-id="{{ demande.getdemandeId }}">
                        <td>{{ demande.idR }}</td>
                        <td class="status">
                            <span class="badge {% if demande.status == 'Approuv√©' %}bg-success{% elseif demande.status == 'Rejet√©' %}bg-danger{% else %}bg-warning{% endif %}">
                                {{ demande.status }}
                            </span>
                        </td>
                        <td class="message">{{ demande.message }}</td>
                        <td>{{ demande.createdAt|date('d/m/Y H:i') }}</td>
                        <td>{{ demande.expireDate|date('d/m/Y H:i') }}</td>
                        <td>
                            <form action="{{ path('app_demandes_update_status', {'id': demande.getdemandeId, 'status': 'Approuv√©'}) }}" method="POST">
                                <button type="submit" class="btn btn-success">Approuver</button>
                            </form>
                        
                            <form action="{{ path('app_demandes_update_status', {'id': demande.getdemandeId ,'status': 'Rejet√©'}) }}" method="POST">
                                <button type="submit" class="btn btn-danger">Rejeter</button>
                            </form>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="6" class="text-center">Aucune demande trouv√©e.</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<script>
document.getElementById("cleanBtn").addEventListener("click", async function() {
    console.log("D√©but du nettoyage...");

    let rows = document.querySelectorAll("tbody tr");
    let changed = false; // üî• D√©claration de changed ici

    console.log(`Nombre de lignes trouv√©es : ${rows.length}`);

    rows.forEach(async (row, index) => {
        let statusElement = row.querySelector("td:nth-child(2) span");
        let messageElement = row.querySelector("td:nth-child(3)");

        if (statusElement && messageElement) {
            let status = statusElement.textContent.trim();
            let message = messageElement.textContent.trim();

            if (status === "en cours") {
                let isValid = await verifyTextWithAI(message);
                let newStatus = isValid ? "en cours" : "rejet√©";

                console.log(`Ligne ${index + 1}: Ancien statut = "${status}", Nouveau statut = "${newStatus}"`);

                statusElement.textContent = newStatus;
                statusElement.className = newStatus === "en cours" ? "badge bg-warning" : "badge bg-danger";

                changed = true; // üî• Mise √† jour de changed
            }
        }
    });

    if (changed) {
        console.log("Modification termin√©e !");
    } else {
        console.log("Aucune modification effectu√©e.");
    }
});



async function verifyTextWithAI(text) {
    if (/^(.)\1{4,}$/.test(text) || text.length < 10) {
        return false;
    }

    try {
        const response = await fetch("https://api-inference.huggingface.co/models/textattack/roberta-base-CoLA", {
            method: "POST",
            headers: {
                "Authorization": "Bearer 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",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ inputs: text })
        });

        const result = await response.json();
        console.log("R√©ponse de l'API Hugging Face:", result);
        
        return !(result.length > 0 && result[0].label === "unacceptable");
    } catch (error) {
        console.error("Erreur API Hugging Face:", error);
        return true; // Si erreur API, consid√©rer valide
    }

}

</script>
{% endblock %}

