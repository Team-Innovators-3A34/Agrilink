{% extends "frontOffice/base.html.twig" %}{% block title %} {% if (action
=="Ajouter")%}Ajouter {% else %} Modifier {% endif %} Ressource{% endblock %} {%
block content %}
<div class="main-content bg-lightblue theme-dark-bg right-chat-active">
  <div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left">
      <div class="middle-wrap">
        <div class="card w-100 border-0 bg-white shadow-xs p-0 mb-4">
          <div class="card-body p-4 w-100 bg-current border-0 d-flex rounded-3">
            <a href="{{ path('app_my_resource') }}" class="d-inline-block mt-2">
              <i class="ti-arrow-left font-sm text-white"></i>
            </a>
            <h4 class="font-xs text-white fw-600 ms-4 mb-0 mt-2">
              {% if (action =="Ajouter")%}Ajouter {% else %} Modifier {% endif
              %}Ressource
            </h4>
          </div>
          <div class="card-body p-lg-5 p-4 w-100 border-0">
            <form method="post" enctype="multipart/form-data">
              {{ form_start(form) }}

              <div class="row">
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.name_r) }}
                  </div>
                </div>
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.type) }}
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.marque) }}
                  </div>
                </div>
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.adresse) }}
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-lg-12 mb-3">
                  <div class="form-group">
                    {{ form_row(form.description) }}
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.prix_location) }}
                  </div>
                </div>
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.superficie) }}
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.status) }}
                  </div>
                </div>
                <div class="col-lg-6 mb-3">
                  <div class="form-group">
                    {{ form_row(form.images, {'attr': {'style': 'margin-top: -8px', 'value': action == 'Modifier' ? image : ''

                    }}) }}
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-lg-12 mb-0">
                  <button
                    type="submit"
                    class="bg-current text-center text-white font-xsss fw-600 p-3 w175 rounded-3 d-inline-block"
                    onclick="return verifierTexte();"
                    id="confirmButton"
                  >
                    Comfirmer
                  </button>
                </div>
              </div>
              {{ form_end(form) }}
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
      const descriptionInput = document.getElementById("resource_description");
      const confirmButton = document.getElementById("confirmButton");
      const errorMessage = document.createElement("p");

      // Ajouter un message d'erreur sous le champ de description
      errorMessage.style.color = "red";
      errorMessage.style.fontSize = "14px";
      descriptionInput.parentNode.appendChild(errorMessage);

      // Désactiver le bouton au début
      confirmButton.disabled = true;

      async function verifierTexte() {
          let description = descriptionInput.value.trim();
          errorMessage.textContent = ""; // Réinitialiser les messages

          

          // Appel API HuggingFace pour analyser le sentiment du texte
          const response = await fetch('https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english', {
              method: 'POST',
              headers: {
                  'Authorization': 'Bearer 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',  // Remplacez par votre clé API HuggingFace
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ inputs: description })
          });

          const result = await response.json();

          // Vérifier si la réponse contient bien des données
          if (!result || !result[0] || result[0].length === 0) {
              errorMessage.textContent = "❌ Erreur lors de l'analyse du texte. Veuillez réessayer.";
              confirmButton.disabled = true;
              return false;
          }

          // Récupération des scores de sentiment
          const negativeScore = result[0].find(item => item.label === "NEGATIVE")?.score || 0;
          const positiveScore = result[0].find(item => item.label === "POSITIVE")?.score || 0;

          // Bloquer la soumission si le texte est trop négatif
          if (negativeScore > positiveScore) {
              errorMessage.textContent = "❌ La description semble négative ou inappropriée. Veuillez reformuler.";
              confirmButton.disabled = true;
              return false;
          }

          // Si la description est correcte, activer le bouton et enlever le message d'erreur
          errorMessage.textContent = "";
          confirmButton.disabled = false;
          return true;
      }

      // Vérifier la description à chaque modification
      descriptionInput.addEventListener("input", verifierTexte);

      document.querySelector("form").addEventListener("submit", async function(event) {
          let isValid = await verifierTexte();
          if (!isValid) {
              event.preventDefault(); // Empêcher l'envoi du formulaire
          }
      });
  });
</script>


{% endblock %}
