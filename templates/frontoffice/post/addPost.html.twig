{% extends "frontoffice/base.html.twig" %}
{% block title %}Publication
{%
endblock %}
{% block content %}
	<div class="main-content bg-lightblue theme-dark-bg right-chat-active">
		<div class="middle-sidebar-bottom">
			<div class="middle-sidebar-left">
				<div class="middle-wrap">
					<div class="card w-100 border-0 bg-white shadow-xs p-0 mb-4">
						<div class="card-body p-4 w-100 bg-current border-0 d-flex rounded-3">
							<a href="{{ path('app_home') }}" class="d-inline-block mt-2">
								<i class="ti-arrow-left font-sm text-white"></i>
							</a>
							<h4 class="font-xs text-white fw-600 ms-4 mb-0 mt-2">
								{% if ("action" == "add")%}Ajouter
								{% else %}
									Ajouter ou Modifier
								{% endif %}
								une Publication
							</h4>
						</div>
						<div class="card-body p-lg-5 p-4 w-100 border-0">
							{% for message in app.flashes('success') %}
								<div class="alert alert-success">{{ message }}</div>
							{% endfor %}
							<form method="post" enctype="multipart/form-data">
								{{ form_start(form, {'attr': {'novalidate': 'novalidate',  'data-turbo': 'false'}}) }}
								<div class="row">
									<div
										class="col-lg-12 mb-3">
										{#      <div class="form-group">
																																																																						                    {{ form_row(form.title, {'attr': {'class': 'form-control', 'placeholder': 'Post title'
																																																																						
																																																																						                    }}) }}
																																																																						                  </div> #}
										<div class="form-group">
											{{ form_label(form.title) }}
											{{ form_widget(form.title) }}
											<div class="error-message">
												{{ form_errors(form.title) }}
											</div>
										</div>

									</div>
									<div class="col-lg-12 mb-3">
										<div class="form-group">
											{{ form_row(form.type, {'attr': {'class': 'form-control', 'placeholder': 'Post type'







                    }}) }}
										</div>
									</div>
									<div class="col-lg-12 mb-3">
										{% if generated_tip is not defined or generated_tip is empty %}
											<button type="button" class="btn btn-primary" id="generate-initial-tip">Générer un conseil agricole</button>
										{% else %}
											<div class="card mb-4">
												<div class="card-header">
													<h5>Conseil agricole du jour</h5>
												</div>
												<div class="card-body">
													<blockquote id="ai-tip" class="blockquote mb-0">
														{{ generated_tip }}
													</blockquote>
												</div>
												<div class="card-footer">
													<button type="button" class="btn btn-secondary" id="generate-new-tip">Générer un nouveau conseil</button>
													<button type="button" class="btn btn-danger" id="remove-tip">Je ne veux pas de conseil</button>
													<input type="hidden" name="ai_tip" id="ai_tip_input" value="{{ generated_tip }}">
												</div>
											</div>
										{% endif %}

										{#   <div class="form-group">
																																																																						                    {{ form_row(form.description, {'attr': {'class': 'form-control', 'placeholder': 'Describe your post', 'required': false
																																																																						                    }}) }}
																																																																						                  </div> #}
										<div class="form-group">
											{{ form_label(form.description) }}
											{{ form_widget(form.description) }}
											<div class="error-message">
												{{ form_errors(form.description) }}
											</div>
										</div>
										<div class="col-lg-12 mb-3">
											<div class="form-group">
												{{ form_row(form.status, {'attr': {'class': 'form-control', 'placeholder': 'Upload image'







                    }}) }}
											</div>
										</div>
										<div class="col-lg-12 mb-3">
											<div class="form-group">
												{{ form_row(form.images, {'attr': {'class': 'form-control', 'placeholder': 'Upload image'







                    }}) }}
												<button type="button" id="generate-image-btn" class="btn btn-primary">Générer une image avec IA</button>

												<div id="generated-image-container" style="display: none; margin-top: 10px;">
													<img id="generated-image" src="" alt="Image générée" class="img-fluid">
													<input type="hidden" id="generated-image-path" name="generated_image_path">
												</div>
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col-lg-12 mb-0">
											<button type="submit" class="bg-current text-center text-white font-xsss fw-600 p-3 w175 rounded-3 d-inline-block">
												Confirmer
											</button>
										</div>
									</div>
									{{ form_end(form) }}
								</form>
								<style>
									.form-group {
										margin-bottom: 1rem;
									}
									.error-message {
										color: #dc3545;
										font-size: 0.875em;
										margin-top: 0.25rem;
									}
									.error-message ul {
										margin: 0;
										padding: 0;
										list-style: none;
									}
								</style>

								{% block javascripts %}
									<script>
										document.getElementById('generate-image-btn').addEventListener('click', function () {
const description = document.getElementById('posts_description').value;

if (! description) {
alert('Veuillez d\'abord écrire une description');
return;
}

this.disabled = true;
this.textContent = 'Génération en cours...';

fetch('{{ path('app_generate_image') }}', {
method: 'POST',
headers: {
'Content-Type': 'application/x-www-form-urlencoded',
'X-Requested-With': 'XMLHttpRequest'
},
body: 'description=' + encodeURIComponent(description)
}).then(response => response.json()).then(data => {
this.disabled = false;
this.textContent = 'Générer une image avec IA';

if (data.success) {
document.getElementById('generated-image').src = '/' + data.imagePath;
document.getElementById('generated-image-path').value = data.imagePath;
document.getElementById('generated-image-container').style.display = 'block';
} else {
alert('Erreur: ' + data.error);
}
});
});
// NEW CODE: AI Tip functionality
// Button to use the generated tip
// Handle initial tip generation
const generateNewTipBtn = document.getElementById('generate-new-tip');
if (generateNewTipBtn) {
console.log('Found generate-new-tip button');
generateNewTipBtn.addEventListener('click', function (e) {
console.log('New tip button clicked!');
e.preventDefault();

// Make an AJAX request to get a fresh tip
fetch('{{ path('app_generate_tip') }}?refresh=true').then(response => response.json()).then(data => {
console.log('Response received:', data);
if (data.tip) { // Directly update the tip on the page without reloading
document.getElementById('ai-tip').textContent = data.tip;
document.getElementById('ai_tip_input').value = data.tip;
console.log('Tip updated to:', data.tip);
}
}).catch(error => {
console.error('Error:', error);
});
});
} else {
console.log('New tip button not found!');
}
const generateInitialTipBtn = document.getElementById('generate-initial-tip');
if (generateInitialTipBtn) {
generateInitialTipBtn.addEventListener('click', function () {
window.location.href = '{{ path('app_generate_tip') }}';
});
}
// Replace the use-tip button functionality with remove-tip
const removeTipBtn = document.getElementById('remove-tip');
if (removeTipBtn) {
console.log('Found remove-tip button');
removeTipBtn.addEventListener('click', function () {
console.log('Remove tip button clicked!');

// Clear the hidden input value
document.getElementById('ai_tip_input').value = '';

// Visual feedback
this.classList.add('active');
if (generateNewTipBtn) {
generateNewTipBtn.classList.remove('active');
}

// Hide the tip display if it exists
const tipElement = document.getElementById('ai-tip');
if (tipElement) {
tipElement.textContent = 'Aucun conseil sélectionné';
tipElement.style.fontStyle = 'italic';
tipElement.style.color = '#999';
}

console.log('Tip removed');
});
} else {
console.log('Remove tip button not found!');
}

// Keep this for backward compatibility if you haven't removed the button yet
const useTipBtn = document.getElementById('use-tip');
if (useTipBtn) {
useTipBtn.addEventListener('click', function () {
const tip = document.getElementById('ai-tip').textContent.trim();
const descriptionField = document.querySelector('{{ form.description.vars.id }}');
if (descriptionField) {
descriptionField.value = descriptionField.value + '\n\n' + tip;
}
});
}
									</script>
								{% endblock %}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	{% endblock %}
